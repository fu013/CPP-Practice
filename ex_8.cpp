// Switch 분기문 = 값이 뭔지를 체크하는 분기문, enum 열거체 (const int형) 연속된 숫자에 이름을 부여할 수 있는 기능, Num enum; 이런식으로 enum 타입부여도 가능하다.
// 자바스크립트 객체표기법과 같이 열거체 안에 변수를 넣어 사용한다.
// #define 컴파일 타임에 값이 정해지는 타입
// 10진수를 16진수로 바꾸는 법, 16진수를 다시 10진수로 바꾸는 법

/*
#include<iostream>
#include<time.h>
using namespace std;
int main() {
		switch 문 : 분기문의 한 종류이다. if문이 조건을 체크하는 분기문이라면
		switch문은 값이 뭔지를 체크하는 분기문이다.
		예를들어 1이라는 값이 온다면 해당값일때 실행하는 스위치문 발동
		"안녕" 이라는 값이 온다면 해당값일때 실행하는 스위치문 발동ㅊ
		case 상수: 의 형태로 처리가 되고, 변수값이 무엇인지에 따라서 case 뒤에 오는
		상수를 비교하게 된다.
	int iNumber;
	cout << "숫자를 입력하세요 : ";
	cin >> iNumber;

	// 열거체 : 연속된 숫자에 이름을 부여할 수 있는 기능이다.
	// enum이라고 부른다. 굉장히 편리하게 코드를 짤수있음
	// enum 열거체명 {} 의 형태로 구성된다.
	// 열거체명을 이용해서 열거체 타입의 변수를 선언도 가능하다.
	// 즉, 열거체 자체가 사용자정의 변수 타입이 될 수도 있다.
	// 언어에서 제공하는 변수타입은 int, float과 같은 일반적인 변수타입을 말하고,
	// 사용자정의 변수타입은 사용자가 만들어낸 변수타입이다.
	// 열거체는 숫자에 이름을 붙여주는 기능이다.

	// enum => int , const 형
	enum NUM { // 자바스크립트 객체표기법과 상당히 유사함
		NUM_0 = 10, // 아무것도 부여하지 않을 경우 0부터 1씩 차례대로 값이 부여된다. 
		NUM_1,
		NUM_2 = 0X0010,
		NUM_3
	};

   // #define 컴파일타임에 값이 정해짐, 컴파일을 하고나서 값이 생기는것 출력을 하기전에
   // 빌드 및 컴파일을 진행하므로 출력했을때 값은 똑같이 나옴
   #define NUM_4 4 // 세미콜론을 쓰지않음

	switch (iNumber) {
	case 1:
		cout << "입력한 숫자는 1입니다." << endl;
		break; // break를 만나면 해당 함수문을 빠져 나가게 된다.
	case NUM_1:
		cout << "입력한 숫자는 11입니다." << endl;
		break; // 브레이크가 없을 경우 바로 아래에 있는문도 강제로 실행된다.
	case NUM_2:
		cout << "입력한 숫자는 16입니다." << endl;
		break;
	case NUM_4:
		cout << "입력한 숫자는 4입니다." << endl;
		break;
	default:
		cout << "그 외의 숫자입니다." << endl;
		break;
	}

	// 열거체 타입의 변수를 선언했다.
	// 열거체 타입의 변수는 4bytes를 차지하게 된다.
	NUM eNum = (NUM)10;
	
	// NUM에다가 INT형인 10을 넣으면 에러가 떠서 (NUM) 타입캐스팅을 해주어야 한다.
	// 사용은 가능하다.

	cout << "NUM의 사이즈는 = " << sizeof(NUM) << "bytes" << endl;
	// sizeof(타입or변수)를 하게 되면 해당 타입 혹은 변수의 메모리 크기(바이트단위)를 구해준다.

	cout << "NUM의 타입은 = " << typeid(eNum).name() << endl;
	cout << eNum << endl;
	// typeid(타입or변수).name() 을 하게되면typeid 안에 들어간 타입 혹은
	// 변수의 타입을 문자열로 반환해준다.

	system("cls"); 
	// 선언된 줄기준으로 위쪽의 cmd 명령을 모두정리해준다 (system("cls")밑에 있는 것만 뜨게됨)
	// continue : 반복문의 시작점으로 이동시켜주는 기능
	// break : 반복문을 아예 빠져나감

	return 0;
}
// 10진수를 2진수로 바꾸는것과 동일함(단지 이진수는 2로 나눌뿐)

// 10진수를 16진수로
// 2015 / 16 = 125, 15
// 125 / 16 = 7 , 13
// 7
// 7 13 15 = 0x7df // == 0x71315

// 16진수를 10진수로
// 0x7df
// 7 x 16^2 (세번째자리,자릿수-1을 제곱=2) 7x256 = 1792
// 13 x 16^1 = 208
// 15 x 16^0 = 15
// 15 + 208 + 1792 = 2015
*/