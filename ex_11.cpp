/*
// C++ 의 배열
// 배열은 여러개의 변수를 한번에 생설해줄 수 있는 기능이다.
// 연속된 메모리 블럭에 값이 할당된다. 배열은 인덱스를 이용해서 내가 원하는 특정부분에 접근해서 값을 저장할 수 있다.
// 배열은 0번부터 배열총개수 -1 번째 인덱스까지 존재한다. 

#include<iostream>
#include<time.h>
using namespace std;
int main() {
	// 배열 : 여러개의 변수를 한번에 생성해줄 수 있는 기능이다.
	// 형태 : 변수타입 배열명[개수]; 의 형태로 선언할 수 있다.
	// 변수는 메모리(RAM)에 공간이 할당되고 저장된다.
	// 배열의 특징 : 배열은 연속된 메모리 블럭에 공간에 할당된다.
	// int Num1, Num2 이렇게 배열이 아닌 각각의 변수로 선언해준다면
	// 각각의 메모리공간이 붙어있지않고 각각 다른공간에 나뉘어져 있을수 있다.
	// 하지만 배열은 각각의 변수들의 메모리공간이 서로 붙어있다.
	int iArray[10]; // 4x10, 인덱스는 0~9 []안에 10은 배열의 개수, 인덱스는따라서 0~9 = 40bytes

	iArray[1] = 1234; // 이러면 1번 인덱스에 1234가 들어감
	// 배열 뿐만 아니라 일반 변수들도 값을 선언을 하고, 값을 초기화(새로 세팅) 하지 않을 경우, 쓰레기값이
	// 들어가게 된다. 예를들어 지금 1번에만 값을 1234를 넣었기에 나머지 2~9번은 쓰레기값이 들어가있다.
	cout << "값을 지정하지 않은 5번 배열값(쓰레기값) = " << iArray[5] << endl;
	// 그래서 반드시 쓰레기값을 초기화 시키기 위해 값을 선언과 동시에 지정해주는게 좋다.

	int iArray2[10] = { 0,1,2,3,4,5,6,7,8,9 }; // 배열의 값 초기화 {} 안의 값은 앞에서부터 0번 인덱스~끝인덱스 까지이다.
	// 만약 int iArray[10] = {0,1,2,3,4,5} 만해주면 0~5번 인덱스는 초기화된 값이 들어가고 나머지 6~9번 인덱스는 0이 들어가게 된다.
	// int iArray[10] = {}; 이렇게 하면 모든 인덱스를 0으로 초기화한다.
	// 아무것도 초기화를 안해주고 int iArray[10]; 이렇게만 하면 모든 인덱스에 쓰레기값으로 랜덤형태의 숫자, 타입에 따라서 문자 등이 들어간다.
	cout << "값을 지정한 5번 배열값 = " << iArray2[5] << endl;

	for (int i = 0; i < 10; ++i) {
		cout << "0번부터 9번까지 출력 = " << iArray2[i] << endl;
	}

	// 2차원 배열, 배열 개수를 2개 지정하면 2차원 배열이 된다. 3개를 지정하면 3차원 배열이 된다. (보통 4차원까지는 쓰는데 그이상은 많이 안쓴다.)
	// 배열 인덱스는 int타입이면 int로 표현할 수 있는 최대치로 설정된다.(10진수로 43억정도의 크기)0xffffffffbytes => f => 16진수하나의 바이트 => 한개가 4비트이므로 총 32비트
	// 2차원 배열의 개수는 앞의 배열수 x 뒤의수이다. 10개의 인덱스를 가진 배열이 10개가 있으므로 100개의 인덱스가 들어있다고 할수있다.
	// 메모리 블럭의 구조는 차이가 없다. 그저 배열의 개수가 많은 만큼 400바이트만큼의 공간을 할당받는것뿐이다.
	// 2차원배열은 1차원의 배열의 인덱스값으로 배열을 넣은형태. 배열안에 배열이 들어간 형태이다.
	// \t = Tab과같이 5칸의 간격을 띄어줌.

	int iArray2D[10][10] = { {1,2,3}, {4,5,6} }; // 2차원 배열 초기화, 0의 0,1,2번 인덱스 / 1의 0,1,2번 인덱스를 초기화 시켜준다. {} 쓰면 싹다 0
	for (int i = 0; i < 10; ++i) { // 이차원배열은 보통 이중포문으로 출력한다.
		for (int j = 0; j < 10; ++j) {
			cout << iArray2D[i][j] << "\t";
		}
		cout << i << "번째 배열입니다." << endl;
	}
	return 0;
}
*/